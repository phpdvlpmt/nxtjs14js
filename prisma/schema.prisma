// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  refresh_token_expires_in Int?


  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model Post {
  id      String    @id @default(cuid())
  title   String
  content String
  author  User   @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  authorEmail String
  categories Category[]
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
}
model Category {
  id    String    @id @default(cuid())
  name  String @db.VarChar(50)
  posts Post[]

  @@unique([name])
}

model Resume{
  id    String    @id @default(cuid())
  username  String @db.VarChar(50)
  title  String @db.VarChar(50)
  total Int @db.Integer
  correctAnswers Int @db.Integer
  wrongAnswers Int @db.Integer
  average Int @db.Integer
  grade Int @db.Integer
  
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt

}